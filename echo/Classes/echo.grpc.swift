//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: echo.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import Foundation
import SwiftGRPC
import SwiftProtobuf

internal protocol Echo_EchoEchoCall: ClientCallUnary {}

fileprivate final class Echo_EchoEchoCallBase: ClientCallUnaryBase<Echo_EchoRequest, Echo_EchoResponse>, Echo_EchoEchoCall {
  override class var method: String { return "/echo.Echo/Echo" }
}


/// Instantiate Echo_EchoServiceClient, then call methods of this protocol to make API calls.
internal protocol Echo_EchoService: ServiceClient {
  /// Synchronous. Unary.
  func echo(_ request: Echo_EchoRequest, metadata customMetadata: Metadata) throws -> Echo_EchoResponse
  /// Asynchronous. Unary.
  @discardableResult
  func echo(_ request: Echo_EchoRequest, metadata customMetadata: Metadata, completion: @escaping (Echo_EchoResponse?, CallResult) -> Void) throws -> Echo_EchoEchoCall

}

internal extension Echo_EchoService {
  /// Synchronous. Unary.
  func echo(_ request: Echo_EchoRequest) throws -> Echo_EchoResponse {
    return try self.echo(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func echo(_ request: Echo_EchoRequest, completion: @escaping (Echo_EchoResponse?, CallResult) -> Void) throws -> Echo_EchoEchoCall {
    return try self.echo(request, metadata: self.metadata, completion: completion)
  }

}

internal final class Echo_EchoServiceClient: ServiceClientBase, Echo_EchoService {
  /// Synchronous. Unary.
  internal func echo(_ request: Echo_EchoRequest, metadata customMetadata: Metadata) throws -> Echo_EchoResponse {
    return try Echo_EchoEchoCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func echo(_ request: Echo_EchoRequest, metadata customMetadata: Metadata, completion: @escaping (Echo_EchoResponse?, CallResult) -> Void) throws -> Echo_EchoEchoCall {
    return try Echo_EchoEchoCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

